function [Aeq beq]= getAbeq(n_seg, n_order, waypoints, ts, start_cond, end_cond)
    n_all_poly = n_seg*(n_order+1);%here needs so many polynomial,because each 
                                   %segment has its own polynomial
    %#####################################################
    % p,v,a,j constraint in start, 
    Aeq_start = zeros(4, n_all_poly);
    beq_start = zeros(4, 1);
    % STEP 2.1: write expression of Aeq_start and beq_start
    % although it has n_all_poly polynomial, but we should 
    % in this part only need to focus on first part of polynomial
    beq_start = start_cond.';
    Aeq_start(1,n_order+1) = 1;
    Aeq_start(2,n_order) = 1;
    Aeq_start(3,n_order-1) = 2;
    Aeq_start(4,n_order-2) = 6;
    Aeq_start

    %#####################################################
    % p,v,a constraint in end
    Aeq_end = zeros(4, n_all_poly);
    beq_end = zeros(4, 1);
    % STEP 2.2: write expression of Aeq_end and beq_end
    beq_end = end_cond.';
    for j = 1:4
        for i = j-1:n_order
            Aeq_end(j,n_all_poly-i) = factorial(i)/factorial(i-j+1)*(ts(size(ts,1)))^(i-j+1);
        end
    end
    Aeq_end
    %
    
    %#####################################################
    % position constrain in all middle waypoints
    Aeq_wp = zeros(n_seg-1, n_all_poly);
    beq_wp = zeros(n_seg-1, 1);
    % STEP 2.3: write expression of Aeq_wp and beq_wp
    % each middle waypoints only have relationship with 2 segment
    % so the result of Aeq_wp should be similar to diagonal matrix
    num = size(waypoints,1)
    beq_wp = waypoints(2:n_seg,:);
    for i = 1:n_seg-1
        for j = 0:n_order
            Aeq_wp(i, (j+1)+(i-1)*(n_order+1)) = ts(i)^(n_order-j);
        end
    end
    Aeq_wp
    
    %#####################################################
    % position continuity constrain between each 2 segments
    Aeq_con_p = zeros(n_seg-1, n_all_poly);
    beq_con_p = zeros(n_seg-1, 1);
    % STEP 2.4: write expression of Aeq_con_p and beq_con_p
    % continuity constrain should only related with two adjacent
    % element, so the value of the output should each row only have
    % 16 elements, others should be 0.
    for i = 1: n_seg-1
        for j = 0:n_order
            Aeq_con_p(i, (j+1)+(i-1)*(n_order+1)) = ts(i)^(n_order-j);
        end
    end
    for i = 1: n_seg-1
        Aeq_con_p(i, (n_order+1)+i*(n_order+1)) = -1;
    end
    Aeq_con_p

    %#####################################################
    % velocity continuity constrain between each 2 segments
    Aeq_con_v = zeros(n_seg-1, n_all_poly);
    beq_con_v = zeros(n_seg-1, 1);
    % STEP 2.5: write expression of Aeq_con_v and beq_con_v
    % same as above
    for i = 1: n_seg-1
        for j = 0:n_order-1
            Aeq_con_v(i, (j+1)+(i-1)*(n_order+1)) = (n_order-*ts(i)^(n_order-j-1);
        end
    end
    for i = 1: n_seg-1
        Aeq_con_v(i, n_order+i*(n_order+1)) = -1;
    end
    Aeq_con_v


    %#####################################################
    % acceleration continuity constrain between each 2 segments
    Aeq_con_a = zeros(n_seg-1, n_all_poly);
    beq_con_a = zeros(n_seg-1, 1);
    % STEP 2.6: write expression of Aeq_con_a and beq_con_a
    for i = 1: n_seg-1
        for j = 0:n_order-2
            Aeq_con_a(i, (j+1)+(i-1)*(n_order+1)) = n_order*(n_order-1)*ts(i)^(n_order-j-2);
        end
    end
    for i = 1: n_seg-1
        Aeq_con_a(i, (n_order-1)+i*(n_order+1)) = -6;
    end
    Aeq_con_a
   
    %#####################################################
    % jerk continuity constrain between each 2 segments
    Aeq_con_j = zeros(n_seg-1, n_all_poly);
    beq_con_j = zeros(n_seg-1, 1);
    % STEP 2.7: write expression of Aeq_con_j and beq_con_j
    for i = 1: n_seg-1
        for j = 0:n_order-3
            Aeq_con_j(i, (j+1)+(i-1)*(n_order+1)) = n_order*(n_order-1)*(n_order-2)*ts(i)^(n_order-j-3);
        end
    end
    for i = 1: n_seg-1
        Aeq_con_j(i, (n_order-2)+i*(n_order+1)) = -12;
    end
    Aeq_con_j
    
    %#####################################################
    % combine all components to form Aeq and beq   
    Aeq_con = [Aeq_con_p; Aeq_con_v; Aeq_con_a; Aeq_con_j];
    beq_con = [beq_con_p; beq_con_v; beq_con_a; beq_con_j];
    Aeq = [Aeq_start; Aeq_end; Aeq_wp; Aeq_con];
    beq = [beq_start; beq_end; beq_wp; beq_con];
end