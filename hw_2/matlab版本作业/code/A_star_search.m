function path = A_star_search(map,MAX_X,MAX_Y)
%%
%This part is about map/obstacle/and other settings
    %pre-process the grid map, add offset
    size_map = size(map,1);
    Y_offset = 0;
    X_offset = 0;
    
    %Define the 2D grid map array.
    %Obstacle=-1, Target = 0, Start=1
    MAP=2*(ones(MAX_X,MAX_Y));
    
    %Initialize MAP with location of the target
    xval=floor(map(size_map, 1)) + X_offset;
    yval=floor(map(size_map, 2)) + Y_offset;
    xTarget=xval;
    yTarget=yval;
    MAP(xval,yval)=0;
    
    %Initialize MAP with location of the obstacle
    for i = 2: size_map-1
        xval=floor(map(i, 1)) + X_offset;
        yval=floor(map(i, 2)) + Y_offset;
        MAP(xval,yval)=-1;
    end 
    
    %Initialize MAP with location of the start point
    xval=floor(map(1, 1)) + X_offset;
    yval=floor(map(1, 2)) + Y_offset;
    xStart=xval;
    yStart=yval;
    MAP(xval,yval)=1;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %LISTS USED FOR ALGORITHM
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %OPEN LIST STRUCTURE
    %--------------------------------------------------------------------------
    %IS ON LIST 1/0 |X val |Y val |Parent X val |Parent Y val |h(n) |g(n)|f(n)|
    %--------------------------------------------------------------------------
    OPEN=[];
    %CLOSED LIST STRUCTURE
    %--------------
    %X val | Y val |
    %--------------
    % CLOSED=zeros(MAX_VAL,2);
    CLOSED=[];

    %Put all obstacles on the Closed list
    k=1;%Dummy counter
    for i=1:MAX_X
        for j=1:MAX_Y
            if(MAP(i,j) == -1)
                CLOSED(k,1)=i;
                CLOSED(k,2)=j;
                k=k+1;
            end
        end
    end
    CLOSED_COUNT=size(CLOSED,1);
    %set the starting node as the first node
    xNode=xval;
    yNode=yval;
    OPEN_COUNT=1;
    goal_distance=distance(xNode,yNode,xTarget,yTarget);
    path_cost=0;
    OPEN(OPEN_COUNT,:)=insert_open(xNode,yNode,xNode,yNode,goal_distance,path_cost,goal_distance);
    OPEN(OPEN_COUNT,1)=0;
    CLOSED_COUNT=CLOSED_COUNT+1;
    CLOSED(CLOSED_COUNT,1)=xNode;
    CLOSED(CLOSED_COUNT,2)=yNode;
    NoPath=1;

%%
%This part is your homework
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
OPEN(OPEN_COUNT,1)=1;
    while(min_fn(OPEN,OPEN_COUNT,xTarget,yTarget)) %you have to dicide the Conditions for while loop exit 
        local_min_index = min_fn(OPEN,OPEN_COUNT,xTarget,yTarget);
        OPEN(local_min_index,1)=0;
        if ((OPEN(local_min_index,2) == xTarget) & (OPEN(local_min_index,3) == yTarget))
            NoPath = 0;
            break;
        end;     
        node_x = OPEN(local_min_index,2);
        node_y = OPEN(local_min_index,3);
        gn = OPEN(local_min_index,7);
        predecessors=expand_array(node_x,node_y,gn,xTarget,yTarget,CLOSED,MAX_X,MAX_Y);
        
        CLOSED_COUNT=CLOSED_COUNT+1;
        CLOSED(CLOSED_COUNT,1)=node_x;
        CLOSED(CLOSED_COUNT,2)=node_y;
        for i = 1:size(predecessors,1)
            xtmp = predecessors(i,1);
            ytmp = predecessors(i,2);         
            if (if_open(OPEN,xtmp,ytmp) == 0)
                OPEN_COUNT = OPEN_COUNT + 1;
                goal_distance_tmp=distance(xtmp,ytmp,xTarget,yTarget);
                OPEN(size(OPEN,1)+1,:)=insert_open(xtmp,ytmp,node_x,node_y,predecessors(i,3),predecessors(i,4),predecessors(i,5));
            else
                nodeIndex = node_index(OPEN,xtmp,ytmp);
                cost_tmp = predecessors(i,5);
                if cost_tmp < OPEN(nodeIndex,8)
                    OPEN(nodeIndex,2) = xtmp;
                    OPEN(nodeIndex,3) = ytmp;
                    OPEN(nodeIndex,4) = node_x;
                    OPEN(nodeIndex,5) = node_y;
                    OPEN(nodeIndex,6) = predecessors(i,3);
                    OPEN(nodeIndex,7) = predecessors(i,4);
                    OPEN(nodeIndex,8) = cost_tmp;
                end;
            end;
        end;
         
     %
     %finish the while loop
     %
     
    end %End of While Loop
    
    %Once algorithm has run The optimal path is generated by starting of at the
    %last node(if it is the target node) and then identifying its parent node
    %until it reaches the start node.This is the optimal path
    
    %
    %How to get the optimal path after A_star search?
    %please finish it
    %
    path = [];
    if NoPath
        pass;
    else
        p_index = node_index(OPEN,xTarget,yTarget);
        PATH_COUNT = 1;
        path(PATH_COUNT,1) = OPEN(p_index,2);
        path(PATH_COUNT,2) = OPEN(p_index,3);
        PATH_COUNT = PATH_COUNT + 1;
        while(1)
            path(PATH_COUNT,1) = OPEN(p_index,4);
            path(PATH_COUNT,2) = OPEN(p_index,5);
            p_index = node_index(OPEN,OPEN(p_index,4),OPEN(p_index,5));
            PATH_COUNT = PATH_COUNT + 1;
            if (OPEN(p_index,4) == xStart & OPEN(p_index,5) == yStart)
                path(PATH_COUNT,1) = OPEN(p_index,2);
                path(PATH_COUNT,2) = OPEN(p_index,3);
                path(PATH_COUNT + 1,1) = OPEN(p_index,4);
                path(PATH_COUNT + 1,2) = OPEN(p_index,5);
                break;
            end
        end
    end
end
